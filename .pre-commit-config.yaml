#############################################################################################
# pre-commit is a "framework for managing and maintaining multi-language pre-commit hooks"  #
# see https://pre-commit.com/#intro for an introduction to pre-commit                       #
#                                                                                            #
# - pre-commit hooks are run on staged files just before a commit or a push                 #
# - to run a given hook on any file at any time, run the following on the command line:     #
#    pre-commit run <HOOK_ID> --files <FILE1> <FILE2> ..., e.g.,                            #
#    pre-commit run autopep8 --files mal_formatted_file.py                                  #
#############################################################################################
exclude: '^$'
# "exclude: '^$'" specifies the global file exclude pattern; '^$' excludes

fail_fast: false
# "fail_fast: false" means pre-commit continues to run hooks after the first failure

repos:
    -   repo: https://github.com/pre-commit/mirrors-mypy
        rev: v0.971
        hooks:
            -   id: mypy  # Run mypy type checker; note: runs with flag --missing-imports
                args: [ --config-file=mypy.ini ]
                # Use language: system to run Mypy git repo's existing virtual environment
                # instead of mypy's own virtual environment. Necessary to find types-.* packages
                # Replace language: python in your hook definition with language: system.
                # Remove the additional_dependencies line and install Mypy into your
                # environment directly. Now, Pre-commit will not create a separate virtualenv
                # for the hook and will run it in whatever environment you happen to be in when
                # you run git commit or pre-commit run => https://jaredkhan.com/blog/mypy-pre-commit
                language: system
                # use require_serial so that script
                # is only called once per commit
                require_serial: true
                # Print the number of files as sanity-check
                verbose: true
                types: [ python ]

    -   repo: https://github.com/pre-commit/mirrors-autopep8
        rev: v1.6.0
        hooks:
            -   id: autopep8  # Perform pep8 auto-formatting
                args: [ --max-line-length=120, --in-place ]
                exclude: |
                    (?x) (
                    ^.*_pb2*
                    )
    -   repo: https://github.com/pre-commit/pre-commit-hooks
        rev: v4.3.0
        hooks:
            -   id: check-added-large-files  # Prevent giant files from being committed
                args: [ maxkb=1024 ]
            -   id: check-ast  # Check whether files parse as valid python
            -   id: check-json  # Attempt to load json files to verify syntax
            -   id: check-xml  # Attempt to load xml files to verify syntax
            -   id: check-yaml  # Attempt to load yaml files to verify syntax
            -   id: check-merge-conflict  # Check for files that contain merge conflict strings
            -   id: check-symlinks  # Check for broken symlinks
            -   id: debug-statements  # Check for debugger imports and py37+ breakpoint() calls
            -   id: detect-private-key  # Check for the existence of private keys
            -   id: check-executables-have-shebangs
            -   id: trailing-whitespace  # Trim trailing whitespace.
            -   id: end-of-file-fixer # makes sure files end in a newline and only a newline
            -   id: pretty-format-json # autoformat json files (e.g. sorting keys)
                args: [ --autofix, --indent=4 ]
            -   id: name-tests-test # name pytest files correctly
                args: [ --pytest-test-first ]
            -   id: requirements-txt-fixer  # Sorts the requirement.txt files' content
                files: 'requirements/requirements.*\.txt$'

    -   repo: https://github.com/pycqa/flake8
        rev: 6.0.0
        hooks:
            -   id: flake8

    -   repo: https://github.com/milin/giticket
        rev: d4a4c3b943892add7ee86d0d54a1e41c76b1fced
        hooks:
            -   id: giticket  # Prepend the commit message with the JIRA ticket
                args: [ '--regex=(?:(?:feature|bugfix|support|hotfix)/)?(OND[0-9]{3}-[0-9]{1,5})[_-][\w-]+',
                        '--format=[{ticket}] {commit_msg}',
                        '--mode=regex_match' ]
